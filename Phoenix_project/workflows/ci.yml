# .github/workflows/ci.yml
# This workflow automates code quality checks for the Phoenix Project.

name: Phoenix Project CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  data-quality-check:
    name: "[V2.0] Data Backtesting Gate"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Data Dependencies
        run: |
          pip install pyyaml pandas

      - name: Run DQM Script
        run: python scripts/validate_dataset.py

  build:
    needs: data-quality-check # This job now depends on the DQM gate
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # cache dependencies to speed up workflows

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # requirements.txt should contain jsonschema
        pip install black ruff mypy # Install linting/formatting/typing tools

    - name: [V2.0] Run Data Quality Gate
      id: data_validation
      run: |
        # This step assumes that a representative data file might exist for validation.
        # In a real scenario, we would fetch test data first.
        # For now, we create a dummy directory to prevent script failure if it's missing.
        mkdir -p data_cache
        # We create a placeholder file if it doesn't exist to test the script path.
        touch data_cache/asset_analysis_cache.json
        python scripts/validate_data.py

    - name: Lint with Ruff
      run: |
        ruff check .

    - name: Type Check with MyPy
      run: |
        mypy .

    - name: Check formatting with Black
      run: |
        black --check .

    - name: Run Pytest
      run: |
        pytest
  
  build-and-push:
    runs-on: ubuntu-latest
    needs: build # Ensures tests pass before building the image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on push to the main branch

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

